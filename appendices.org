#+TITLE: Appendices
#+SUBTITLE: Reference Materials for Your Gardening Journey

* Appendix A: Garden Glossary

A gardener's vocabulary grows with experience. Here are the terms we've 
cultivated throughout our journey:

** Garden Terms → Vue Terms

- *Bed* → Component: A self-contained growing area
- *Climate* → Environment: Development vs. production conditions
- *Compost* → Composables: Reusable, enriching logic
- *Fertilizer* → Props: Nutrients passed to components
- *Garden Path* → Route: Navigation through your application
- *Greenhouse* → Build tools: Controlled development environment
- *Harvest* → Build/Deploy: Preparing for production
- *Irrigation* → Reactivity: Automatic data flow
- *Pest* → Bug: Code issues that need fixing
- *Plant* → Component instance: Individual UI elements
- *Pruning* → Refactoring: Removing dead or excess code
- *Root System* → Component tree: Application hierarchy
- *Season* → Development phase: Different stages of growth
- *Seed* → Component definition: Blueprint for growth
- *Seed Packet* → Single-File Component: Complete component package
- *Soil* → DOM: Where components grow
- *Tool Shed* → Store: Centralized state management
- *Transplant* → Deploy: Moving to production
- *Water* → Data: What flows through your application
- *Watering Can* → Event: User interactions
- *Weather* → External factors: APIs, user input, system state
- *Weed* → Technical debt: Code that needs removing

** Vue Technical Glossary

*** A-C

- *Action*: Store method that can be asynchronous
- *Async Component*: Component loaded on demand
- *Binding*: Connection between data and DOM
- *Build*: Process of optimizing for production
- *Component*: Reusable Vue instance with a name
- *Composable*: Function using Composition API for reusable logic
- *Composition API*: Function-based API for component logic
- *Computed Property*: Cached, reactive derived value

*** D-L

- *Data*: Reactive state in a component
- *Directive*: Special token in markup (v-if, v-for)
- *DOM*: Document Object Model - the rendered HTML
- *Emit*: Send event from child to parent
- *Event*: User interaction or component communication
- *Getter*: Store computed property
- *Hook*: Lifecycle event in component
- *HMR*: Hot Module Replacement - instant updates
- *Instance*: Created component in memory
- *Lifecycle*: Component stages from creation to destruction

*** M-P

- *Method*: Function in component or store
- *Mixin*: Reusable component options (legacy)
- *Mount*: Attach component to DOM
- *Mutation*: Synchronous store state change (Vuex)
- *Options API*: Object-based API for components
- *Pinia*: Official Vue state management
- *Plugin*: Adds global functionality to Vue
- *Props*: Data passed from parent to child
- *Provide/Inject*: Dependency injection system

*** R-S

- *Reactive*: Automatically updates when data changes
- *Ref*: Reactive reference to a value
- *Render Function*: Programmatic template alternative
- *Route*: Path in your application
- *Router*: Navigation system for SPA
- *Scoped Slot*: Slot with access to child data
- *Setup*: Composition API entry point
- *SFC*: Single-File Component (.vue file)
- *Slot*: Content distribution outlet
- *SSR*: Server-Side Rendering
- *State*: Data that can change over time
- *Store*: Centralized state container

*** T-W

- *Template*: HTML-based Vue syntax
- *Teleport*: Render content elsewhere in DOM
- *Transition*: Animation between states
- *Two-way Binding*: v-model synchronization
- *Virtual DOM*: JavaScript representation of DOM
- *Vite*: Fast build tool for Vue
- *Vue DevTools*: Browser extension for debugging
- *Vuex*: Previous state management (prefer Pinia)
- *Watcher*: Reacts to data changes
- *Webpack*: Module bundler (alternative to Vite)

* Appendix B: Seasonal Resources

Different seasons of your Vue journey require different resources:

** Spring: Beginning Your Garden

*** Essential Seeds (Getting Started)
- [[https://vuejs.org/guide/][Official Vue.js Guide]] - The gardener's manual
- [[https://vueschool.io/][Vue School]] - Video gardening lessons
- [[https://www.vuemastery.com/][Vue Mastery]] - Advanced growing techniques
- [[https://laracasts.com/series/learn-vue-3-step-by-step][Laracasts Vue 3]] - Step-by-step planting guide

*** Garden Planning Tools
- [[https://vite.dev/][Vite]] - Modern greenhouse builder
- [[https://cli.vuejs.org/][Vue CLI]] - Classic garden kit (legacy)
- [[https://nuxt.com/][Nuxt]] - Full garden ecosystem
- [[https://quasar.dev/][Quasar]] - Multi-platform gardens

** Summer: Active Growing

*** Component Libraries (Established Plants)
- [[https://vuetifyjs.com/][Vuetify]] - Material Design garden
- [[https://element-plus.org/][Element Plus]] - Enterprise garden suite
- [[https://www.naiveui.com/][Naive UI]] - Modern garden aesthetics
- [[https://www.primefaces.org/primevue/][PrimeVue]] - Rich component collection
- [[https://headlessui.com/][Headless UI]] - Unstyled, accessible components

*** Garden Tools (Development)
- [[https://devtools.vuejs.org/][Vue DevTools]] - Garden inspection tools
- [[https://pinia.vuejs.org/][Pinia]] - Official tool shed
- [[https://router.vuejs.org/][Vue Router]] - Path laying system
- [[https://vueuse.org/][VueUse]] - Composable utility collection

** Fall: Harvesting and Optimizing

*** Testing Tools (Quality Assurance)
- [[https://vitest.dev/][Vitest]] - Unit test framework
- [[https://test-utils.vuejs.org/][Vue Test Utils]] - Component testing
- [[https://www.cypress.io/][Cypress]] - E2E garden tours
- [[https://playwright.dev/][Playwright]] - Cross-browser testing
- [[https://testing-library.com/docs/vue-testing-library/intro/][Testing Library]] - User-centric tests

*** Performance Tools
- [[https://web.dev/measure/][Lighthouse]] - Performance audit
- [[https://bundlephobia.com/][Bundlephobia]] - Package size checker
- [[https://rollupjs.org/plugin-visualizer/][Rollup Visualizer]] - Bundle analysis
- [[https://github.com/vuejs/vue-devtools/tree/main/packages/app-backend-vue3][Vue DevTools Profiler]] - Runtime performance

** Winter: Planning and Learning

*** Advanced Study (Books & Courses)
- "Design Patterns for Vue.js" - Component architecture
- "Fullstack Vue 3" - Complete ecosystem guide
- "Testing Vue.js Applications" - Quality assurance
- [[https://www.patterns.dev/][Patterns.dev]] - Modern web patterns

*** Community Gardens
- [[https://github.com/vuejs/awesome-vue][Awesome Vue]] - Curated resource list
- [[https://forum.vuejs.org/][Vue Forum]] - Community help
- [[https://discord.com/invite/HBherRA][Vue Land Discord]] - Real-time chat
- [[https://www.reddit.com/r/vuejs/][Vue.js Subreddit]] - Discussion forum
- [[https://twitter.com/vuejs][Vue.js Twitter]] - Latest news

* Appendix C: Troubleshooting Common Pests

Every garden faces challenges. Here's how to identify and solve common 
Vue garden pests:

** The Reactivity Beetle

*Symptoms*: Data changes but view doesn't update

*Diagnosis & Treatment*:
#+BEGIN_SRC javascript
// Problem: Array index assignment
this.plants[index] = newPlant; // Won't trigger update

// Solution 1: Use array methods
this.plants.splice(index, 1, newPlant);

// Solution 2: Replace entire array
this.plants = [...this.plants.slice(0, index), newPlant, ...this.plants.slice(index + 1)];

// Problem: Adding new object properties
this.garden.newProp = value; // Won't be reactive in Vue 2

// Solution: Define all properties upfront or use reactive()
this.garden = reactive({ ...this.garden, newProp: value });
#+END_SRC

** The Memory Leak Aphid

*Symptoms*: Application slows over time, memory usage increases

*Diagnosis & Treatment*:
#+BEGIN_SRC javascript
// Problem: Forgotten event listeners
mounted() {
  window.addEventListener('resize', this.handleResize);
}
// Missing cleanup!

// Solution: Always clean up
unmounted() {
  window.removeEventListener('resize', this.handleResize);
}

// Better: Use composables that auto-cleanup
import { useEventListener } from '@vueuse/core';

setup() {
  useEventListener(window, 'resize', handleResize);
  // Automatically cleaned up!
}
#+END_SRC

** The Prop Mutation Worm

*Symptoms*: Console warnings about mutating props

*Diagnosis & Treatment*:
#+BEGIN_SRC javascript
// Problem: Modifying prop directly
props: ['waterLevel'],
methods: {
  water() {
    this.waterLevel += 10; // Error! Can't mutate prop
  }
}

// Solution 1: Use local data copy
props: ['initialWaterLevel'],
data() {
  return {
    waterLevel: this.initialWaterLevel
  }
}

// Solution 2: Emit event to parent
props: ['waterLevel'],
methods: {
  water() {
    this.$emit('update:waterLevel', this.waterLevel + 10);
  }
}
#+END_SRC

** The Infinite Loop Caterpillar

*Symptoms*: Browser freezes, infinite re-renders

*Diagnosis & Treatment*:
#+BEGIN_SRC javascript
// Problem: Watcher modifying watched value
watch: {
  plants() {
    this.plants.push(newPlant); // Infinite loop!
  }
}

// Solution: Use conditions
watch: {
  plants(newPlants) {
    if (newPlants.length < 10) {
      this.addDefaultPlant();
    }
  }
}

// Problem: Computed with side effects
computed: {
  plantCount() {
    this.updateStats(); // Side effect in computed!
    return this.plants.length;
  }
}

// Solution: Use watchers for side effects
computed: {
  plantCount() {
    return this.plants.length;
  }
},
watch: {
  plantCount() {
    this.updateStats();
  }
}
#+END_SRC

** The CORS Grasshopper

*Symptoms*: API calls fail with CORS errors

*Diagnosis & Treatment*:
#+BEGIN_SRC javascript
// Problem: Direct API calls from browser
fetch('https://api.garden.com/plants'); // CORS error

// Solution 1: Configure dev proxy
// vite.config.js
export default {
  server: {
    proxy: {
      '/api': {
        target: 'https://api.garden.com',
        changeOrigin: true
      }
    }
  }
}

// Solution 2: Use backend proxy
// Make requests to your backend, which calls the API

// Solution 3: CORS headers on API (if you control it)
// Access-Control-Allow-Origin: *
#+END_SRC

** The Build Size Slug

*Symptoms*: Large bundle size, slow initial load

*Diagnosis & Treatment*:
#+BEGIN_SRC javascript
// Problem: Importing entire libraries
import _ from 'lodash'; // Imports everything

// Solution: Import only what you need
import debounce from 'lodash/debounce';

// Problem: Large components loaded upfront
import HeavyComponent from './HeavyComponent.vue';

// Solution: Lazy load
const HeavyComponent = () => import('./HeavyComponent.vue');

// Analyze bundle
// package.json
"scripts": {
  "analyze": "vite build --mode analyze"
}
#+END_SRC

** The Route Guard Spider

*Symptoms*: Navigation doesn't work, infinite redirects

*Diagnosis & Treatment*:
#+BEGIN_SRC javascript
// Problem: Guard always redirects
beforeEnter: (to, from, next) => {
  next('/login'); // Always redirects!
}

// Solution: Add conditions
beforeEnter: (to, from, next) => {
  if (!isAuthenticated()) {
    next('/login');
  } else {
    next(); // Allow navigation
  }
}

// Problem: Forgot to call next()
beforeEnter: (to, from, next) => {
  checkAuth(); // Forgot next()!
}

// Solution: Always call next()
beforeEnter: async (to, from, next) => {
  await checkAuth();
  next();
}
#+END_SRC

* Appendix D: Garden Maintenance Checklist

Regular maintenance keeps your Vue garden healthy:

** Daily Care
- [ ] Run development server, check console for errors
- [ ] Test new features in multiple browsers
- [ ] Commit changes with meaningful messages
- [ ] Review pull requests from team members
- [ ] Update project documentation

** Weekly Tasks
- [ ] Run full test suite
- [ ] Update dependencies (minor versions)
- [ ] Review and refactor one component
- [ ] Check accessibility with screen reader
- [ ] Profile performance in DevTools
- [ ] Clean up unused code and files

** Monthly Maintenance
- [ ] Audit bundle size and optimize
- [ ] Update dependencies (major versions)
- [ ] Security audit with npm audit
- [ ] Review error logs from production
- [ ] Update team documentation
- [ ] Backup important configurations

** Seasonal Reviews
- [ ] Evaluate architecture decisions
- [ ] Plan major refactoring if needed
- [ ] Upgrade Vue and related packages
- [ ] Review and update testing strategy
- [ ] Assess performance metrics
- [ ] Plan next quarter's features

** Emergency Kit

Keep these tools ready for garden emergencies:

#+BEGIN_SRC bash
# Rollback to previous version
git revert HEAD
npm run build
npm run deploy

# Clear all caches
npm cache clean --force
rm -rf node_modules package-lock.json
npm install

# Debug production issues
# Add to main.js
if (process.env.NODE_ENV === 'production') {
  Vue.config.errorHandler = (err, vm, info) => {
    // Send to error tracking service
    console.error('Production error:', err);
  };
}

# Performance emergency
# Check bundle size
npm run build -- --report

# Find large dependencies
npm ls --depth=0 | grep -E '\d+\.\d+\s+(MB|KB)'
#+END_SRC

* Appendix E: Seed Catalog (Starter Templates)

Ready-to-plant templates for common garden patterns:

** Basic Component Seed

#+BEGIN_SRC vue
<template>
  <div class="component-name">
    <!-- Your garden bed -->
  </div>
</template>

<script setup>
import { ref, computed, onMounted } from 'vue';

// Props
const props = defineProps({
  seedType: {
    type: String,
    required: true
  }
});

// Emits
const emit = defineEmits(['grow', 'harvest']);

// State
const height = ref(0);

// Computed
const isMatture = computed(() => height.value > 100);

// Methods
const grow = () => {
  height.value += 10;
  emit('grow', height.value);
};

// Lifecycle
onMounted(() => {
  console.log('Planted!');
});
</script>

<style scoped>
.component-name {
  /* Component styles */
}
</style>
#+END_SRC

** Composable Seed

#+BEGIN_SRC javascript
// composables/useGardenTool.js
import { ref, computed, watch, onMounted, onUnmounted } from 'vue';

export function useGardenTool(initialValue = null) {
  // State
  const toolState = ref(initialValue);
  const isActive = ref(false);
  
  // Computed
  const status = computed(() => {
    return isActive.value ? 'in-use' : 'available';
  });
  
  // Methods
  const activate = () => {
    isActive.value = true;
  };
  
  const deactivate = () => {
    isActive.value = false;
  };
  
  // Watchers
  watch(isActive, (newVal) => {
    console.log(`Tool is now ${newVal ? 'active' : 'inactive'}`);
  });
  
  // Lifecycle
  onMounted(() => {
    // Setup
  });
  
  onUnmounted(() => {
    // Cleanup
  });
  
  return {
    toolState,
    isActive,
    status,
    activate,
    deactivate
  };
}
#+END_SRC

** Store Module Seed

#+BEGIN_SRC javascript
// stores/garden-section.js
import { defineStore } from 'pinia';

export const useGardenSection = defineStore('gardenSection', {
  state: () => ({
    plants: [],
    waterLevel: 100,
    temperature: 72
  }),
  
  getters: {
    plantCount: (state) => state.plants.length,
    
    healthyPlants: (state) => {
      return state.plants.filter(p => p.health > 70);
    },
    
    needsWater: (state) => state.waterLevel < 30
  },
  
  actions: {
    addPlant(plant) {
      this.plants.push({
        id: Date.now(),
        addedAt: new Date(),
        ...plant
      });
    },
    
    waterAll() {
      if (this.waterLevel >= 20) {
        this.waterLevel -= 20;
        this.plants.forEach(p => {
          p.water = 100;
        });
      }
    },
    
    async fetchWeather() {
      try {
        const response = await fetch('/api/weather');
        const data = await response.json();
        this.temperature = data.temperature;
      } catch (error) {
        console.error('Weather fetch failed:', error);
      }
    }
  }
});
#+END_SRC

---

/Your reference materials are complete. Like a well-organized tool shed,/
/everything you need is here when you need it. May these appendices serve/
/you well in your continued Vue gardening journey./