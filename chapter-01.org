#+TITLE: Chapter 1: Preparing the Soil
#+SUBTITLE: Vue Fundamentals and Your First Seedling

* Chapter 1: Preparing the Soil

Every garden begins with soil. Not the plants, not the plan‚Äîthe soil. 
Rich, dark earth that crumbles between your fingers, ready to nurture 
whatever you plant. In our Vue garden, that soil is our development 
environment, and understanding it makes everything else possible.

Let's get our hands dirty.

* Understanding Your Garden Plot (The DOM)

Before we plant anything, we need to understand the land we're working 
with. In web development, that land is the Document Object Model‚Äîthe DOM.

** The Living Document

Think of the DOM as your actual garden plot‚Äîa living, breathing space 
that changes with the seasons. Just as your garden transforms from bare 
earth in spring to abundance in summer, the DOM transforms based on user 
interactions and data changes.

Traditional JavaScript gardening (vanilla JS) requires you to manually 
tend every plant:

#+BEGIN_SRC javascript
// The old way: hand-watering each plant
document.getElementById('tomato-plant').innerHTML = 'Growing...';
document.getElementById('tomato-plant').style.height = '20px';
// ... for every single change
#+END_SRC

That's like watering your garden with a teaspoon. It works, but there's 
a better way.

** Enter Vue: The Automatic Irrigation System

Vue is like installing an intelligent irrigation system in your garden. 
You describe what you want to grow, and Vue handles the watering, feeding, 
and general maintenance:

#+BEGIN_SRC javascript
// The Vue way: automated garden care
new Vue({
  data: {
    plantHeight: 20,
    plantStatus: 'Growing...'
  }
})
#+END_SRC

Vue watches your data like a vigilant gardener, updating the DOM whenever 
something changes. You focus on what you want to grow, not the mechanics 
of growth.

* Testing the Soil (Development Environment)

Before planting, wise gardeners test their soil. Is it acidic? Alkaline? 
Sandy? Clay? Similarly, we need to prepare our development environment.

** Checking Your Tools

First, let's see what's already in your shed. Open your terminal (think 
of it as your garden workshop) and check:

#+BEGIN_SRC bash
# Check if Node.js is installed (your primary gardening tool)
node --version

# Check if npm is installed (your seed catalog)
npm --version
#+END_SRC

If these commands return version numbers, excellent! Your basic tools 
are ready. If not, visit nodejs.org‚Äîthink of it as your local garden 
supply store‚Äîand download the LTS version.

** Preparing Your First Garden Bed

Now let's prepare a small plot for our first Vue seedling:

#+BEGIN_SRC bash
# Create your garden directory
mkdir my-vue-garden
cd my-vue-garden

# Initialize the garden registry (package.json)
npm init -y

# Plant Vue in your garden
npm install vue@3
#+END_SRC

Congratulations! You've just prepared your first Vue garden bed. It might 
not look like much yet‚Äîjust some configuration files‚Äîbut beneath the 
surface, the soil is now rich with potential.

* Your First Seedling (Hello Vue)

Time to plant your first seed. In gardening, we often start with something 
simple and fast-growing‚Äîradishes or lettuce. In Vue, we start with "Hello 
Vue."

** Preparing the Seed Bed

Create a new file called =index.html=. This is your seed tray:

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Vue Garden</title>
</head>
<body>
    <!-- Your garden plot -->
    <div id="app">
        <!-- This is where Vue will plant things -->
        {{ message }}
    </div>

    <!-- Import Vue (like adding fertilizer) -->
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    
    <!-- Your gardening instructions -->
    <script>
        const { createApp } = Vue;
        
        // Define what you want to grow
        createApp({
            data() {
                return {
                    message: 'üå± Hello Vue Garden!'
                }
            }
        }).mount('#app');  // Plant it in your garden plot
    </script>
</body>
</html>
#+END_SRC

Open this file in your browser. You should see "üå± Hello Vue Garden!" 
where the `{{ message }}` was. That's your first sprout breaking through 
the soil!

** Understanding What Just Grew

Let's examine our seedling more closely:

1. *The Garden Plot* (=<div id="app">=): This is where Vue plants everything
2. *The Seed* (={{ message }}=): These double curly braces are like seed 
   markers‚Äîthey tell Vue "something will grow here"
3. *The Growing Instructions* (=data()=): This describes what should grow
4. *The Planting* (=.mount('#app')=): This tells Vue where to plant

Change the message in your data, save, and refresh. Watch how quickly 
your plant responds to new conditions!

* The Garden Blueprint (Vue Instance)

Every garden needs a plan. Where will the tomatoes go? How much space 
for squash? In Vue, this plan is the Vue instance‚Äîthe blueprint for 
your entire application.

** Anatomy of a Vue Garden Plan

Let's expand our simple seedling into a proper garden plan:

#+BEGIN_SRC javascript
const { createApp } = Vue;

createApp({
    // The seeds and plants (your data)
    data() {
        return {
            gardenName: 'My Digital Garden',
            plants: ['Tomatoes', 'Basil', 'Peppers'],
            season: 'Spring',
            daysGrowing: 0
        }
    },
    
    // Garden tools (your methods)
    methods: {
        water() {
            this.daysGrowing++;
            console.log(`Watered the garden. Day ${this.daysGrowing}`);
        },
        
        addPlant(plantName) {
            this.plants.push(plantName);
        },
        
        changeSeason(newSeason) {
            this.season = newSeason;
        }
    },
    
    // Automatic garden calculations (computed properties)
    computed: {
        plantCount() {
            return this.plants.length;
        },
        
        gardenStatus() {
            if (this.daysGrowing < 30) return 'Just planted';
            if (this.daysGrowing < 60) return 'Growing nicely';
            return 'Ready to harvest!';
        }
    },
    
    // Garden preparation (lifecycle hooks)
    created() {
        console.log('Preparing the garden beds...');
    },
    
    mounted() {
        console.log('Garden is ready for planting!');
        // Start the growing season
        this.water();
    }
}).mount('#app');
#+END_SRC

** Understanding Each Section

*** Data: Your Seed Inventory
The =data()= function returns an object containing all the things that 
can grow and change in your garden. These are reactive‚Äîwhen they change, 
your garden display updates automatically.

*** Methods: Your Gardening Actions
These are the things you can do in your garden. Water plants, add new 
seeds, change decorations. Each method is a gardening task you can perform.

*** Computed: Your Garden Sensors
Like moisture sensors or thermometers, computed properties automatically 
calculate values based on your garden's current state. They're smart‚Äîthey 
only recalculate when the underlying data changes.

*** Lifecycle Hooks: The Growing Season
Just as a garden has seasons‚Äîpreparing beds, planting, growing, harvesting‚Äî
Vue components have lifecycle stages. These hooks let you run code at 
specific times in your component's life.

* Tending Your First Garden

Now let's create a more complete garden that you can actually tend:

#+BEGIN_SRC html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Interactive Vue Garden</title>
    <style>
        #app {
            font-family: 'Segoe UI', sans-serif;
            max-width: 600px;
            margin: 50px auto;
            padding: 20px;
            background: linear-gradient(to bottom, #87CEEB 0%, #98D98E 100%);
            border-radius: 10px;
            box-shadow: 0 4px 6px rgba(0,0,0,0.1);
        }
        
        .garden-plot {
            background: #8B4513;
            padding: 20px;
            border-radius: 5px;
            margin: 20px 0;
            border: 3px solid #654321;
        }
        
        .plant {
            display: inline-block;
            margin: 5px;
            padding: 10px;
            background: #90EE90;
            border-radius: 20px;
            border: 2px solid #228B22;
        }
        
        button {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            margin: 5px;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
        }
        
        button:hover {
            background: #45a049;
        }
        
        input {
            padding: 10px;
            margin: 5px;
            border: 2px solid #4CAF50;
            border-radius: 5px;
            font-size: 16px;
        }
    </style>
</head>
<body>
    <div id="app">
        <h1>üåª {{ gardenName }}</h1>
        
        <div class="info">
            <p>Season: {{ season }} | Days Growing: {{ daysGrowing }}</p>
            <p>Garden Status: <strong>{{ gardenStatus }}</strong></p>
            <p>Total Plants: {{ plantCount }}</p>
        </div>
        
        <div class="garden-plot">
            <h3>Your Garden:</h3>
            <span v-for="plant in plants" :key="plant" class="plant">
                {{ plant }}
            </span>
            <p v-if="plants.length === 0">
                Your garden is empty. Time to plant something!
            </p>
        </div>
        
        <div class="controls">
            <h3>Garden Controls:</h3>
            <button @click="water">üíß Water Garden</button>
            <button @click="changeSeason('Summer')">‚òÄÔ∏è Summer</button>
            <button @click="changeSeason('Fall')">üçÇ Fall</button>
            <button @click="changeSeason('Winter')">‚ùÑÔ∏è Winter</button>
            <button @click="changeSeason('Spring')">üå∏ Spring</button>
            
            <div style="margin-top: 20px;">
                <input v-model="newPlant" 
                       placeholder="What would you like to plant?"
                       @keyup.enter="plantSeed">
                <button @click="plantSeed">üå± Plant</button>
            </div>
        </div>
    </div>

    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script>
        const { createApp } = Vue;
        
        createApp({
            data() {
                return {
                    gardenName: 'My Digital Garden',
                    plants: ['üçÖ Tomatoes', 'üåø Basil', 'üå∂Ô∏è Peppers'],
                    season: 'Spring',
                    daysGrowing: 0,
                    newPlant: ''
                }
            },
            
            methods: {
                water() {
                    this.daysGrowing += 7;
                    
                    // Plants might fruit after enough watering!
                    if (this.daysGrowing > 30 && Math.random() > 0.7) {
                        const fruits = ['üçÖ', 'üå∂Ô∏è', 'ü•í', 'üçÜ'];
                        const randomFruit = fruits[Math.floor(Math.random() * fruits.length)];
                        alert(`Harvest time! You picked a ${randomFruit}!`);
                    }
                },
                
                plantSeed() {
                    if (this.newPlant.trim()) {
                        // Add appropriate emoji based on plant type
                        let plant = this.newPlant;
                        if (plant.toLowerCase().includes('tomato')) plant = 'üçÖ ' + plant;
                        else if (plant.toLowerCase().includes('flower')) plant = 'üå∏ ' + plant;
                        else if (plant.toLowerCase().includes('tree')) plant = 'üå≥ ' + plant;
                        else plant = 'üå± ' + plant;
                        
                        this.plants.push(plant);
                        this.newPlant = '';
                    }
                },
                
                changeSeason(newSeason) {
                    this.season = newSeason;
                    
                    // Different seasons affect the garden
                    if (newSeason === 'Winter') {
                        alert('Brrr! Remember to protect your plants from frost!');
                    } else if (newSeason === 'Summer') {
                        alert('Hot weather! Your plants will need extra water.');
                    }
                }
            },
            
            computed: {
                plantCount() {
                    return this.plants.length;
                },
                
                gardenStatus() {
                    if (this.plants.length === 0) return 'Empty plot';
                    if (this.daysGrowing < 30) return 'üå± Just planted';
                    if (this.daysGrowing < 60) return 'üåø Growing nicely';
                    if (this.daysGrowing < 90) return 'üåª Flourishing';
                    return 'üçÖ Ready to harvest!';
                }
            },
            
            mounted() {
                console.log('üå± Your Vue Garden is ready!');
                console.log('Try watering your plants and watch them grow.');
            }
        }).mount('#app');
    </script>
</body>
</html>
#+END_SRC

* What's Growing Here?

Let's examine the new techniques in our flourishing garden:

** Directives: Garden Signs and Labels

We've introduced Vue directives‚Äîspecial attributes that tell Vue how to 
tend specific parts of your garden:

- =v-for=: Like planting rows of crops, this creates multiple elements
- =v-if=: Like seasonal plants, these only appear under certain conditions
- =v-model=: Like a moisture sensor connected to your irrigation, this 
  creates two-way data binding
- =@click= (or =v-on:click=): Like a garden gate latch, this responds to 
  user interactions

** Event Handling: Responding to Garden Visitors

The =@click= directive is how your garden responds to visitors. When someone 
presses a button (opens a gate, turns a valve), your methods spring into 
action. The =@keyup.enter= is even more specific‚Äîit's like a doorbell that 
only rings when someone uses the special key.

** Reactive Growth

Notice how everything updates automatically? Water your garden, and the 
day counter increases. Add a plant, and it appears immediately. Change 
seasons, and the display updates. This is Vue's reactivity system at 
work‚Äîlike having an intelligent greenhouse that adjusts everything 
automatically based on conditions.

* Common Garden Pests (and How to Deal with Them)

Even in our digital garden, we encounter pests. Here are common ones 
for beginners:

** The "Nothing Appears" Aphid

*Symptoms*: Your page is blank where Vue content should be.

*Treatment*: Check the browser console. Usually, you'll find:
- Typo in your mount selector (=#ap= instead of =#app=)
- Missing script tag for Vue
- JavaScript error preventing Vue from starting

** The "Data Doesn't Update" Slug

*Symptoms*: You change data, but the display doesn't update.

*Treatment*: Ensure you're:
- Modifying data properties that exist in your initial data
- Using =this.propertyName= in methods
- Not trying to add new properties dynamically (we'll learn the right way later)

** The "Event Doesn't Fire" Beetle

*Symptoms*: Clicking buttons does nothing.

*Treatment*: Verify:
- Method name is spelled correctly in both template and methods object
- You're using =@click= not =onClick= (Vue uses @ for events)
- The method actually exists in your methods object

* Preparing for Tomorrow's Planting

You've successfully prepared your soil and grown your first Vue seedlings! 
Your garden might be simple now, but you've learned the fundamentals:

- How Vue tends the DOM for you
- Setting up your development environment
- Creating and mounting Vue applications
- Working with reactive data
- Handling user interactions
- Using directives to control rendering

Tomorrow, we'll learn about components‚Äîthe real plants of your Vue garden. 
Think of today's work as preparing seedlings in a greenhouse. Soon, we'll 
transplant them into a full garden with multiple beds, each growing its 
own specialized crops.

* Exercises: Tending Your Garden

Before moving on, try these gardening tasks:

** Exercise 1: The Weather Station
Add a =temperature= data property and buttons to increase/decrease it. 
Make the garden status change based on temperature (too cold, just right, 
too hot).

** Exercise 2: The Harvest Basket
Create a separate =harvested= array. Add a "harvest" button to each plant 
that moves it from =plants= to =harvested=.

** Exercise 3: The Garden Journal
Add a =journal= array that logs every action (watering, planting, season 
changes) with timestamps. Display the last 5 journal entries.

** Exercise 4: The Pest Alert
Randomly have "pests" appear when watering (use =Math.random()=). Give the 
user a button to "spray" them away. Track how many pests they've defeated.

* Closing Thoughts

As the sun sets on your first day in the Vue garden, take a moment to 
appreciate what you've grown. From bare earth, you've created a living, 
interactive garden. It responds to your touch, grows with your care, and 
already shows signs of the abundance to come.

Tomorrow, we'll learn to grow components‚Äîreusable plants that you can 
cultivate once and replant anywhere. But tonight, rest. Even gardens 
need the quiet of evening to prepare for tomorrow's growth.

Water your code garden one more time before bed. Change the message, add 
a plant, click some buttons. Feel the soil between your fingers. You're 
not just learning Vue‚Äîyou're becoming a gardener.

---

/The evening breeze carries the promise of tomorrow's planting. Your Vue/
/garden has taken root./